name: CD - Deploy Frontend to AKS

on:
  # Run manually and supply the two backend URLs (include http:// and port)
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'Product API base URL (e.g., http://4.254.49.239:8000)'
        required: true
        default: 'http://4.254.49.239:8000'
      order_api_ip:
        description: 'Order API base URL (e.g., http://20.227.83.188:8001)'
        required: true
        default: 'http://20.227.83.188:8001'

env:
  # Your repo secrets (must exist)
  AZ_RG:  ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZ_AKS: ${{ secrets.AKS_CLUSTER_NAME }}
  ACR:    ${{ secrets.ACR_NAME }}              # e.g. affan722acr01 (short name)
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}  # e.g. affan722acr01.azurecr.io
  IMAGE_TAG: latest

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (Service Principal JSON)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry (by name)
        run: az acr login --name "$ACR"

      - name: Inject Backend IPs into frontend/main.js
        run: |
          echo "Injecting BACKEND URLs:"
          echo "PRODUCT: ${{ inputs.product_api_ip }}"
          echo "ORDER:   ${{ inputs.order_api_ip }}"
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"     frontend/main.js
          echo "--- main.js (after) ---"
          nl -ba frontend/main.js | sed -n '1,120p'
          echo "-----------------------"

      - name: Build & Push Frontend image
        run: |
          docker build -t "$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG" ./frontend/
          docker push "$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG"

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "$AZ_RG" \
            --name "$AZ_AKS" \
            --overwrite-existing
          kubectl get nodes

      - name: Deploy Frontend to AKS
        working-directory: k8s
        run: |
          # Ensure image in k8s/frontend.yaml points to your ACR:
          # image: affan722acr01.azurecr.io/frontend:latest
          kubectl apply -f frontend.yaml
          kubectl get deploy,svc -l app=frontend -o wide

      # >>> THIS WAS THE PROBLEMATIC STEP; NOW IT AUTO-DETECTS BY LABEL <<<
      - name: Show Frontend EXTERNAL-IP (auto-detect service)
        shell: bash
        run: |
          set -euo pipefail

          # Detect the service by label (your svc has app=frontend)
          SVC_NAME=$(kubectl get svc -l app=frontend -o jsonpath='{.items[0].metadata.name}' || true)
          if [ -z "${SVC_NAME:-}" ]; then
            echo "No service found with label app=frontend. Listing all services:"
            kubectl get svc -o wide || true
            # Do NOT fail the job because deployment may still be fine
            exit 0
          fi
          echo "Detected frontend service: ${SVC_NAME}"

          echo "Waiting for EXTERNAL-IP (up to ~5 min)..."
          for i in {1..60}; do
            IP=$(kubectl get svc "${SVC_NAME}" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            echo "Attempt $i/60: ${IP:-<pending>}"
            if [ -n "${IP:-}" ]; then
              echo "FRONTEND_IP=${IP}" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done

          echo "Final service state:"
          kubectl get svc "${SVC_NAME}" -o wide || true

      - name: Logout from Azure
        if: always()
        run: az logout
